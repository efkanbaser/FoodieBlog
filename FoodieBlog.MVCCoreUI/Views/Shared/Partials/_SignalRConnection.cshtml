@{
    var userId = Context.Request.Cookies["ActiveUserCookie"];
}

@if (!string.IsNullOrEmpty(userId))
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect()
            .build();

        // Track notifications
        const notifications = [];

        // Set up the notification handler
        connection.on("ReceiveCommentNotification", (postId, commentAuthor, postTitle) => {
            @* console.log("Notification received!", { postId, commentAuthor, postTitle }); *@

            // Create notification object
            const notification = {
                id: Date.now(), // unique id based on timestamp
                message: `${commentAuthor} commented on your post: "${postTitle}"`,
                postId: postId,
                time: new Date(),
                read: false
            };

            // Add to notifications array
            notifications.unshift(notification); // Add to the beginning

            // Update counter and dropdown
            updateNotificationCounter();
            updateNotificationDropdown();

            // Show a small popup temporarily
            showNotificationPopup(notification.message);
        });

        // Start connection and register user
        connection.start()
            .then(() => {
                @* console.log("SignalR Connected successfully"); *@
                // Register this connection with the user's ID
                return connection.invoke("RegisterUser", '@userId');
            })
            .then(() => {
                @* console.log("User registered with SignalR successfully"); *@

                // Set up event listeners for the notification bell
                setupNotificationBell();
            })
            .catch(err => console.error("SignalR Connection Error: ", err));

        function setupNotificationBell() {
            const bell = document.getElementById('notification-bell');
            const dropdown = document.getElementById('notification-dropdown');

            if (bell) {
                bell.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Toggle dropdown
                    if (dropdown.style.display === 'none') {
                        dropdown.style.display = 'block';
                        // Mark all as read when opened
                        markAllAsRead();
                    } else {
                        dropdown.style.display = 'none';
                    }
                });

                // Close dropdown when clicking elsewhere
                document.addEventListener('click', function(e) {
                    if (dropdown.style.display === 'block') {
                        dropdown.style.display = 'none';
                    }
                });
            }
        }

        function updateNotificationCounter() {
            const counter = document.getElementById('notification-counter');
            if (counter) {
                const unreadCount = notifications.filter(n => !n.read).length;

                if (unreadCount > 0) {
                    counter.textContent = unreadCount;
                    counter.style.display = 'block';
                } else {
                    counter.style.display = 'none';
                }
            }
        }

        function updateNotificationDropdown() {
            const dropdown = document.getElementById('notification-dropdown');
            if (dropdown) {
                // Clear current notifications
                dropdown.innerHTML = '';

                if (notifications.length === 0) {
                    dropdown.innerHTML = '<div class="notification-item">No notifications</div>';
                    return;
                }

                // Add notifications to dropdown
                notifications.slice(0, 5).forEach(notification => {
                    const item = document.createElement('div');
                    item.className = 'notification-item' + (notification.read ? ' read' : '');
                    item.innerHTML = `
                        <div class="notification-message">${notification.message}</div>
                        <div class="notification-time">${formatTime(notification.time)}</div>
                    `;

                    // Add click event to go to the post
                    item.addEventListener('click', function() {
                        // Mark as read
                        notification.read = true;
                        updateNotificationCounter();

                        // Navigate to the post
                        window.location.href = `/Post/Details/${notification.postId}`;
                    });

                    dropdown.appendChild(item);
                });

                // Add "see all" if more than 5
                if (notifications.length > 5) {
                    const seeAll = document.createElement('div');
                    seeAll.className = 'notification-see-all';
                    seeAll.textContent = 'See all notifications';
                    seeAll.addEventListener('click', function() {
                        // You could redirect to a full notifications page
                        // window.location.href = '/Notifications';
                        alert('Show all notifications page');
                    });
                    dropdown.appendChild(seeAll);
                }
            }
        }

        function markAllAsRead() {
            notifications.forEach(n => n.read = true);
            updateNotificationCounter();
            updateNotificationDropdown();
        }

        function formatTime(date) {
            // Simple time formatting
            const now = new Date();
            const diff = Math.floor((now - date) / 1000 / 60); // minutes

            if (diff < 1) return 'Just now';
            if (diff < 60) return `${diff} minutes ago`;

            const hours = Math.floor(diff / 60);
            if (hours < 24) return `${hours} hours ago`;

            return date.toLocaleDateString();
        }

        function showNotificationPopup(message) {
            // Create temporary popup
            const popup = document.createElement('div');
            popup.className = 'notification-popup';
            popup.textContent = message;
            document.body.appendChild(popup);

            // Remove after 3 seconds
            setTimeout(() => {
                popup.classList.add('fade-out');
                setTimeout(() => popup.remove(), 500);
            }, 3000);
        }
    </script>

    <style>
        /* Notification Badge */
        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: red;
            color: white;
            border-radius: 50%;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            min-width: 1rem;
            text-align: center;
        }

        /* Notification Dropdown */
        .notification-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            width: 300px;
            max-height: 400px;
            overflow-y: auto;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .notification-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }

            .notification-item:hover {
                background-color: #f5f5f5;
            }

            .notification-item.read {
                opacity: 0.7;
            }

        .notification-message {
            font-size: 14px;
        }

        .notification-time {
            font-size: 12px;
            color: #777;
            margin-top: 5px;
        }

        .notification-see-all {
            padding: 10px 15px;
            text-align: center;
            font-weight: bold;
            background-color: #f9f9f9;
            cursor: pointer;
        }

        /* Notification Popup */
        .notification-popup {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 1000;
            animation: slideIn 0.5s ease-out;
        }

            .notification-popup.fade-out {
                opacity: 0;
                transition: opacity 0.5s ease-out;
            }

        @@keyframes slideIn {
            from

        {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }

        }

        /* Make the wrapper relative for positioning */
        .notification-wrapper {
            position: relative;
            display: inline-block;
        }
    </style>
}